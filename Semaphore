#include <iostream>
#include <mutex>
#include <condition_variable>
#include <thread>
#include <queue>
#include <semaphore.h>
#include <stdio.h>

using namespace std;

std::queue<int> myquee;
std::mutex queueMutex;
std::mutex mtx;
std::condition_variable cv;

int count = 0;

Semaphore semFree(5);
Semaphore semFull(5);

inline void up(){

	std::unique_lock<std::mutex> lock(mtx);
	count++;
	cv.notify_one();

}



inline void down(){

	std::unique_lock<std::mutex> lock(mtx);

	while (count == 0) {
		cv.wait(lock);

	}

	count--;

}



void prod() {

	int produced = NULL;

	while (true) {

		if (produced == NULL)
			produced++;

		semFree.down();
		std::lock_guard<std::mutex> guard(queueMutex);{

			if (myquee.size() < 10) {

				myquee.push(produced);
				cout << "produced "<< endl;
				produced = NULL;

			} 
		}
		semFull.up();
	}

}



void cons() {

	while (true) {

		semFull.down();

		std::lock_guard<std::mutex> guard(queueMutex);

		{

			if (myquee.size > 0){

				myquee.pop();		
				
			}
		}

		semFree.up();
		cout << "Consumed "<< endl;
	}

}



int main()

{

	while (true) {


		thread Prod(Producator);
		thread Cons(Consumator);

		Prod.join();
		Cons.join();



	}

	system("pause");

	return 0;

}

